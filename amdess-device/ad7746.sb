// ad7746.sb

#define CLOCK_HZ 100000     // 100 KHz

// AD7746 Constants
#define AD7746_ADDRESS 0x48
#define AD7746_REG_STATUS           0x00
#define AD7746_REG_CAP_DATA_BASE    0x01
#define AD7746_REG_CAP_SETUP        0x07
#define AD7746_REG_EXC_SETUP        0x09
#define AD7746_REG_CONFIGURATION    0x0A

dim cdcRes   // result var unique to this file
dim i2cHandle
dim i2cWriteStr$, i2cReadStr$, i2cReadLen   // i2cWriteRead() vars
dim statusReg       // status reg
dim capSetupReg     // capacitance setup reg
dim excSetupReg     // excitation setup reg
dim configReg       // configuration reg
dim dataReg         // data reg
dim tmp

dim uartStrLen
dim uartRxStr$
dim termCmd$
dim endFuncVal

termCmd$ = "end\r"

////
//// HandleUartRx()
////
function HandleUartRx()
    TimerStart(1,100,0)     // allow enough time for data to reach rx buffer
endfunc 1

////
//// ReadFromUart()
////
function ReadFromUart()

endFuncVal = 1

uartStrLen = uartRead(uartRxStr$)

if strcmp(uartRxStr$, termCmd$) == 0 then
    print "\nEnding program execution."
    endFuncVal = 0
endif

endfunc endFuncVal

////
//// SampleCapData()
////
function SampleCapData()

// read status reg
cdcRes = i2cReadReg8(AD7746_ADDRESS, AD7746_REG_STATUS, statusReg)
print "\nSTATUS: 0x", INTEGER.H'statusReg

cdcRes = BleEncode8(i2cWriteStr$, AD7746_REG_CAP_DATA_BASE, 0)
i2cReadStr$ = ""    // reset
i2cReadLen = 3      // read 3B

//cdcRes = i2cWriteRead(AD7746_ADDRESS, i2cWriteStr$, i2cReadStr$, i2cReadLen)
//cdcRes = BleDecodeU8(i2cReadStr$, statusReg, 0)
//print "\nRaw data:", i2cReadStr$
//print "\nInteger data: 0x", INTEGER.H'statusReg

if statusReg % 2 == 0 then
    // the 0-bit (RDYCAP) is low, indicating new data is ready!
    dataReg = 0x00
    cdcRes = i2cWriteRead(AD7746_ADDRESS, i2cWriteStr$, i2cReadStr$, i2cReadLen)
    //print "\nRaw data:", i2cReadStr$

    cdcRes = BleDecodeU8(i2cReadStr$, tmp, 0)
    dataReg = tmp
    cdcRes = BleDecodeU8(i2cReadStr$, tmp, 1)
    dataReg = dataReg << 8
    dataReg = dataReg | tmp
    //print "\nInteger data: 0x", INTEGER.H'dataReg
    cdcRes = BleDecodeU8(i2cReadStr$, tmp, 0)
    dataReg = dataReg << 8
    dataReg = dataReg | tmp
    print "\nInteger data: 0x", INTEGER.H'dataReg

endif

endfunc 1

////
//// SetupAD7746()
////
sub SetupAD7746()

cdcRes = i2cOpen(CLOCK_HZ, 0, i2cHandle)

// set reg values
// set EXC reg (enable EXCA, set VDD/2 excitation voltage level)
cdcRes = i2cWriteReg8(AD7746_ADDRESS, AD7746_REG_EXC_SETUP, 0x0B)
// set CAP SET-UP reg (enable cap channel, use CIN2, set differential mode)
cdcRes = i2cWriteReg8(AD7746_ADDRESS, AD7746_REG_CAP_SETUP, 0xE0)
// set CONFIGURATION reg (92.0ms conversion time, continuous conversion mode)
cdcRes = i2cWriteReg8(AD7746_ADDRESS, AD7746_REG_CONFIGURATION, 0x31)

// read reg values
cdcRes = i2cReadReg8(AD7746_ADDRESS, AD7746_REG_STATUS, statusReg)
cdcRes = i2cReadReg8(AD7746_ADDRESS, AD7746_REG_EXC_SETUP, excSetupReg)
cdcRes = i2cReadReg8(AD7746_ADDRESS, AD7746_REG_CAP_SETUP, capSetupReg)
cdcRes = i2cReadReg8(AD7746_ADDRESS, AD7746_REG_CONFIGURATION, configReg)

print "\nSTATUS: 0x", INTEGER.H'statusReg
print "\nEXC SET-UP: 0x", INTEGER.H'excSetupReg
print "\nCAP SET-UP: 0x", INTEGER.H'capSetupReg
print "\nCONFIGURATION: 0x", INTEGER.H'configReg

endsub

////
//// main()
////

SetupAD7746()

// start timer #2, 200ms, recurring
TimerStart(0, 700, 1)

onevent EVUARTRX    call HandleUartRx
onevent EVTMR0      call SampleCapData
onevent EVTMR1      call ReadFromUart

waitevent
