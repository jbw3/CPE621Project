// amdessServiceLib.sblib

#include "ble_defines.sblib"

dim res2                // result of operations (res2 so as not to conflict with res)
dim numBytesExtracted   // for BleDecodeU8() function
dim valueStr$

////
//// CreateArmStateCharacteristic()
////
sub CreateArmStateChar(byRef amdessSvcHandle, byRef armStateCharHandle)

dim armStateValueMD, armStateCccdMD
dim armStateCharProps
dim armState$

res2 = BleEncode8(armState$, 0, 0)   // not armed by default
armStateCharProps =   BLE_CHAR_PROP_READ | BLE_CHAR_PROP_WRITE | BLE_CHAR_PROP_NOTIFY

// ARM STATE characteristic
armStateValueMD = BleAttrMetadata(1, 1, 1, 0, res2)
armStateCccdMD = BleAttrMetadata(1, 1, 2, 0, res2)
res2 = BleCharNew(armStateCharProps, BleHandleUuid16(0xFEED), armStateValueMD, armStateCccdMD, 0)
res2 = BleCharCommit(amdessSvcHandle, armState$, armStateCharHandle)

if res2 != 0 then
    print "\nUnable to commit ARM STATE characteristic. RC:", res2
endif

endsub

////
//// CreateAlarmStateChar()
////
sub CreateAlarmStateChar(byRef amdessSvcHandle, byRef alarmStateCharHandle)

dim alarmStateValueMD, alarmStateCccdMD
dim alarmStateCharProps
dim alarmState$

res2 = BleEncode8(alarmState$, 0, 0)   // not alarming by default
alarmStateCharProps = BLE_CHAR_PROP_READ | BLE_CHAR_PROP_WRITE | BLE_CHAR_PROP_NOTIFY

// ALARM STATE characteristic
alarmStateValueMD = BleAttrMetadata(1, 1, 1, 0, res2)
alarmStateCccdMD = BleAttrMetadata(1, 1, 2, 0, res2)
res2 = BleCharNew(alarmStateCharProps, BleHandleUuid16(0xFACE), alarmStateValueMD, alarmStateCccdMD, 0)
res2 = BleCharCommit(amdessSvcHandle, alarmState$, alarmStateCharHandle)

endsub

////
//// CreateBattLevelChar()
////
sub CreateBattLevelChar(byRef amdessSvcHandle, byRef battLevelCharHandle)

    dim battLevel$
    dim battLevelCharProps
    dim battLevelMD

    res2 = BleEncode8(battLevel$, 0, 0)    // battery level of 0 by default
    battLevelCharProps = BLE_CHAR_PROP_READ

    battLevelMD = BleAttrMetadata(1, 0, 1, 0, res2)
    res2 = BleCharNew(battLevelCharProps, BleHandleUuid16(0x2A19), battLevelMD, 0, 0)
    res2 = BleCharCommit(amdessSvcHandle, battLevel$, battLevelCharHandle)

endsub

////
//// CreateCapSampleChar()
////
sub CreateCapSampleChar(byRef amdessSvcHandle, byRef hCapSampleChar)

    dim capSampleMD, capSampleCccdMD
    dim capSampleCharProps
    dim capSample$

    res2 = BleEncode32(capSample$, 0, 0)   // cap sample value of 0 by default
    capSampleCharProps = BLE_CHAR_PROP_READ | BLE_CHAR_PROP_NOTIFY

    // ALARM STATE characteristic
    capSampleMD = BleAttrMetadata(1, 0, 4, 0, res2)
    capSampleCccdMD = BleAttrMetadata(1, 1, 2, 0, res2)
    res2 = BleCharNew(capSampleCharProps, BleHandleUuid16(0xCDCD), capSampleMD, capSampleCccdMD, 0)
    res2 = BleCharCommit(amdessSvcHandle, capSample$, hCapSampleChar)

endsub

////
//// CreateAmdessService()
////
sub CreateAmdessService(byRef amdessSvcHandle, byRef hArmStateChar, byRef hAlarmStateChar, byRef hBattLevelChar, byRef hCapSampleChar)

dim hUuidAmdess

hUuidAmdess = BleHandleUuid16(0xACDC)
res2 = BLEServiceNew(BLE_SVC_PRIMARY, hUuidAmdess, amdessSvcHandle)
CreateArmStateChar(amdessSvcHandle, hArmStateChar)
CreateAlarmStateChar(amdessSvcHandle, hAlarmStateChar)
CreateBattLevelChar(amdessSvcHandle, hBattLevelChar)
CreateCapSampleChar(amdessSvcHandle, hCapSampleChar)

endsub

////
//// ReadU8CharValue()
////
function ReadU8CharValue(byRef hChar, byRef valueInt)

// read characteristic (value attribute)
res2 = BleCharValueRead(hChar, valueStr$)

if res2 == 0 then
    // decode an 8-bit int (cls: decode doesn't return a success/fail code)
    numBytesExtracted = BleDecodeU8(valueStr$, valueInt, 0)
endif

endfunc res2

////
//// WriteU8CharValue()
////
function WriteU8CharValue(byRef hChar, byRef valueInt, byVal notify)

// encode an 8-bit int
res2 = BleEncode8(valueStr$, valueInt, 0)

if res2 == 0 then
    if notify == 1 then
        res2 = BleCharValueNotify(hChar, valueStr$)
    else
        res2 = BleCharValueWrite(hChar, valueStr$)
    endif

endif

endfunc res2

////
//// Write32CharValue()
////
function Write32CharValue(byRef hChar, byRef valueInt, byVal notify)

// encode a 32-bit int
res2 = BleEncode32(valueStr$, valueInt, 0)

if res2 == 0 then
    if notify == 1 then
        res2 = BleCharValueNotify(hChar, valueStr$)
    else
        res2 = BleCharValueWrite(hChar, valueStr$)
    endif
endif

endfunc res2
