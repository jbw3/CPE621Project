#include "amdessServiceLib.sblib"

///////////////////////////////
// program settings
#define ALERT_TRIGGER_PERIOD_SEC 10
#define ADVERT_TMOUT_SEC 120
///////////////////////////////

///////////////////////////////
// gap settings
///////////////////////////////
#define DEV_NAME "AMDeSS Sensor"
#define NAME_IS_WR 0                // name is writable
#define APPEAR 0                    // unknown
#define MIN_CON_INT 500000            // min connection interval (microseconds)
#define MAX_CON_INT 1000000         // max connection interval (microseconds)
#define SUPRV_TO 4000000
#define SLAVE_LTCY 0
///////////////////////////////

///////////////////////////////
// global program variables
///////////////////////////////
dim res             // result of operations
dim endFuncVal      // variable for endfunc
dim conn            // connection handle

// ble handles
dim hAmdessSvc       // AMDeSS service handle
dim hArmStateChar       // ARM STATE characteristic handle
dim hAlarmStateChar     // ALARM STATE characteristic handle

// program state variables
dim armState            // holds value of arm state
dim armStateCCCD        // holds value of arm state CCCD
dim notifyArmState      // caches the notify bit from CCCD so it is only extracted
                        // from CCCD when it actually changes
dim alarmState          // holds value of alarm state
dim alarmStateCCCD      // holds value of alarm state CCCD
dim notifyAlarmState    // caches the notify bit from CCCD so it is only extracted
                        // from CCCD when it actually changes

// uart vars
dim uartRxStr$
dim uartTermStr$
dim uartStrLen
///////////////////////////////

uartTermStr$ = "end\r"  // ends execution

////
//// Handle BLE Advertizing Timeout
////
function HandleBleAdvTimeout()
    print "\nAdvert timed out."
endfunc 0

////
//// Configure BLE GAP service
////
sub ConfigureGAP()
    res = BleGapSvcInit(DEV_NAME, NAME_IS_WR, APPEAR, MIN_CON_INT, MAX_CON_INT, SUPRV_TO, SLAVE_LTCY)
    if (res == 0) then
        print "\nGAP service initialized successfully!"
    else
        print "\nBleGapSvcInit() failed with a result of ", res
    endif
endsub

////
//// HandleBleMsg()
///
function HandleBleMsg(byval msgId as integer, byval msgCtx as integer)
    print "\nmsgId: ", msgId
    select msgId
        case 0
            // received new connection! save connection handle
            conn = msgCtx
            // cls: trigger a (fake) alert every n seconds for testing
            TimerStart(2, ALERT_TRIGGER_PERIOD_SEC * 1000, 1)
        case 1
            print "\nConnection lost."
            exitfunc 0  // we successfully disconnected!
        case else
            // do nothing special for now...
    endselect
endfunc 1

////
//// HandleCCCDWritten()
////
function HandleCCCDWritten(byVal charHandle, byVal cccdValue)

if charHandle == hArmStateChar then
    print "\nArm State CCCD written! Value: 0x", INTEGER.H'cccdValue
    armStateCCCD = cccdValue    // save arm state CCCD value
    notifyArmState = armStateCCCD & 0x01    // extract bit 0 (notify bit)

elseif charHandle == hAlarmStateChar then
    print "\nAlarm State CCCD written! Value: 0x", INTEGER.H'cccdValue
    alarmStateCCCD = cccdValue  // save alarm state CCCD value
    notifyAlarmState = alarmStateCCCD & 0x01    // extract bit 0 (notify bit)

endif

endfunc 1

////
//// HandleUartRx()
////
function HandleUartRx()
    TimerStart(3,100,0)     // allow enough time for data to reach rx buffer
endfunc 1

////
//// StartBle()
////
sub StartBle()

    dim peerAdr$
    dim advertInterval_ms : advertInterval_ms = 1000    // advertise every second
    dim advertTimeout_ms : advertTimeout_ms = ADVERT_TMOUT_SEC * 1000

    // configure the GAP service
    print "\nConfiguring GAP..."
    ConfigureGAP()
    print "\nCurrent device name: ", BleGetDeviceName$()

    // configure Amdess service
    print "\nConfiguring AMDeSS service..."
    CreateAmdessService(hAmdessSvc, hArmStateChar, hAlarmStateChar)

    if BleAdvertStart(BLE_ADV_INDIRECT, peerAdr$, advertInterval_ms, advertTimeout_ms, BLE_FP_DISABLE_WHITELIST) == 0 then
        print "\nStarted advertising..."
    else
        print "\nUnable to start advertising!"
    endif

endsub

////
//// ReadFromUart()
////
function ReadFromUart()

endFuncVal = 1

uartStrLen = uartRead(uartRxStr$)

if strcmp(uartRxStr$, uartTermStr$) == 0 then
    print "\nTrying to disconnect BLE..."
    if BleDisconnect(conn) == 0 then
        print "\nDisconnected."
    else
        print "\nUnable to disconnect. BLE may not have been connected..."
    endif
    print "\nEnding program execution."
    endFuncVal = 0
endif

uartRxStr$ = ""     // reset the variable

endfunc endFuncVal

////
//// ReadArmState()
//// Return code: 0 = success, Nonzero = failure
////
function ReadArmState(byRef armStateInt)
    res = ReadU8CharValue(hArmStateChar, armStateInt)
    if res != 0 then
        print "\nUnable to read ARM STATE", res
    endif
endfunc res

////
//// ReadAlarmState()
////
function ReadAlarmState(byRef alarmStateInt)
    res = ReadU8CharValue(hAlarmStateChar, alarmStateInt)
    if res != 0 then
        print "\nUnable to read ALARM STATE", res
    endif
endfunc res

////
//// WriteAlarmState()
////
function WriteAlarmState(byRef alarmStateInt)
    // notifyAlarmState determines whether this writes or notifies
    res = WriteU8CharValue(hAlarmStateChar, alarmStateInt, notifyAlarmState)
    if res != 0 then
        print "\nUnable to write ALARM STATE"
    endif
endfunc res

////
//// PeriodicTriggerAlarm()
////
function PeriodicTriggerAlarm()

print "\nEntering PeriodicTriggerAlarm..."

// check ArmState characteristic
res = ReadArmState(armState)

if armState == 1 then

    res = ReadAlarmState(alarmState)
    // toggle alarm state
    alarmState = !alarmState
    // write the new alarm state
    res = WriteAlarmState(alarmState)

    if res == 0 then
        print "\nAlarm state written!"
    endif
endif

endfunc 1

////
//// main()
////

// set up event handlers
onevent EVBLE_ADV_TIMEOUT   call HandleBleAdvTimeout
onevent EVBLEMSG            call HandleBleMsg
onevent EVCHARCCCD          call HandleCCCDWritten
onevent EVUARTRX            call HandleUartRx
onevent EVTMR2              call PeriodicTriggerAlarm
onevent EVTMR3              call ReadFromUart

// init services and start advertising
StartBle()

waitevent
