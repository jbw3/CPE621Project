#include "ble_defines.sblib"

#define ADV_IND 0

// Filter policies
#define FP_DISABLE_WHITELIST 0

// GAP settings
#define DEV_NAME "AMDeSS Sensor"
#define NAME_IS_WR 0                // name is writable
#define APPEAR 0                    // unknown
#define MIN_CON_INT 500000            // min connection interval (microseconds)
#define MAX_CON_INT 1000000         // max connection interval (microseconds)
#define SUPRV_TO 4000000
#define SLAVE_LTCY 0

///////////////////////////////
// program settings
#define ALERT_AFTER_SEC 5
#define ADVERT_TMOUT_SEC 120
///////////////////////////////

dim res             // result of operations
dim conn            // connection handle
dim immAlertSvc     // immediate alert service handle
dim alertLevel$     // alert level value
dim alertLevelHandle    // alert level characteristic handle
dim hAmdessSvc       // AMDeSS service handle
dim hArmStateChar       // ARM STATE characteristic handle
dim hAlarmState         // ALARM STATE characteristic handle
dim EnableCreateIASvc

// uart vars
dim uartRxStr$, termStr$, endFuncVal, len
termStr$ = "end\r"  // ends execution

////
//// Handle BLE Advertizing Timeout
////
function HandleBleAdvTimeout()
    print "\nAdvert timed out."
endfunc 0

////
//// Configure BLE GAP service
////
sub ConfigureGAP()

    res = BleGapSvcInit(DEV_NAME, NAME_IS_WR, APPEAR, MIN_CON_INT, MAX_CON_INT, SUPRV_TO, SLAVE_LTCY)

    if (res == 0) then
        print "\nGAP service initialized successfully!"
    else
        print "\nBleGapSvcInit() returned a result of ", res
    endif

endsub

////
//// HandleBleMsg()
///
function HandleBleMsg(byval msgId as integer, byval msgCtx as integer)

    print "\nmsgId: ", msgId

    select msgId
        case 0
            // received new connection! save connection handle
            conn = msgCtx
            TimerStart(2, ALERT_AFTER_SEC * 1000, 0)

        case 1
            print "\nConnection lost."
            exitfunc 0  // we successfully disconnected!

        case else
            // do nothing special for now...

    endselect

endfunc 1

////
//// HandleUartRx()
////
function HandleUartRx()
    TimerStart(3,100,0)     // allow enough time for data to reach rx buffer
endfunc 1

////
//// ForceDisconnect()
////
function ForceDisconnect()
    // don't return 0 from here b/c the disconnection will cause our
    // HandleBleMsg() to run, which wil end execution on a disconnect.
    if BleDisconnect(conn) == 0 then
        print "\nDisconnected."
    endif
endfunc 1

////
//// CreateImmAlertSvc()
////
sub CreateImmAlertSvc()

    // Immediate Alert Service
    dim IASUuid16
    dim IAS_ID
    IAS_ID = 0x1802

    // get handle to immediate alert service
    IASUuid16 = BLEHandleUuid16(IAS_ID)

    print "\nIAS 128-bit UUID:", INTEGER.H'IASUuid16

    res = BLEServiceNew(BLE_SVC_PRIMARY, IASUuid16, immAlertSvc)

    if res == 0 then
        print "\nCreated the ImmediateAlert service!"
    else
        print "\nUnable to create the ImmediateAlert service"
    endif

    dim mdVal

    mdVal = BleAttrMetadata(1, 1, 1, 0, res)

    if res == 0 then
        print "\nBleAttrMetadata returned a success code."
    else
        print "\nBleAttrMetadata did not work!", integer.H'res
    endif

    res = BleCharNew(6, BleHandleUuid16(0x2A06), mdVal, 0, 0)

    if res == 0 then
        print "\nSuccessfully created a new characteristic for IAS!"
    else
        print "\nUnable to create a new characteristic."
        print "\nReturn code: ", integer.H'res
    endif

    alertLevel$ = "\00"   // no alert by default

    res = BleCharCommit(immAlertSvc, alertLevel$, alertLevelHandle)

    if res == 0 then
        print "\nSuccessfully committed immediate alert characteristic"
    else
        print "\nUnable to commit IAS characteristic"
        print "\nReturn code: ", integer.H'res
    endif

endsub

////
//// CreateAMDeSSService()
////
sub CreateAMDeSSService()

dim armStateValueMD, armStateCccdMD
dim armState$
dim hUuidAmdess
dim armStateCharProps
dim alarmStateCharProps

armState$ = "\00"   // no alert by default
armStateCharProps =   BLE_CHAR_PROP_READ | BLE_CHAR_PROP_WRITE | BLE_CHAR_PROP_NOTIFY
alarmStateCharProps = BLE_CHAR_PROP_READ | BLE_CHAR_PROP_WRITE | BLE_CHAR_PROP_NOTIFY

hUuidAmdess = BleHandleUuid16(0xACDC)
res = BLEServiceNew(BLE_SVC_PRIMARY, hUuidAmdess, amdessSvc)

// ARM STATE characteristic
armStateValueMD = BleAttrMetadata(1, 1, 1, 0, res)
armStateCccdMD = BleAttrMetadata(1, 1, 2, 0, res)
res = BleCharNew(armStateCharProps, BleHandleUuid16(0xFEED), armStateValueMD, armStateCccdMD, 0)
res = BleCharCommit(amdessSvc, armState$, armStateHandle)

// ALARM STATE characteristic
//res = BleCharNew()

endsub

////
//// StartBle()
////
sub StartBle()

    dim peerAdr$
    dim advertInterval_ms
    dim advertTimeout_ms : advertTimeout_ms = ADVERT_TMOUT_SEC * 1000
    dim filterPolicy

    // ----------------------------
    // configure advertizing
    // ----------------------------
    // advertise every second
    advertInterval_ms = 1000
    filterPolicy = FP_DISABLE_WHITELIST

    print "\nCurrent device name: ", BleGetDeviceName$()

    // configure the GAP service
    ConfigureGAP()

    if EnableCreateIASvc == 1 then
        CreateAMDeSSService()
    endif

    print "\nCurrent device name: ", BleGetDeviceName$()

    if BleAdvertStart(ADV_IND, peerAdr$, advertInterval_ms, advertTimeout_ms, filterPolicy) == 0 then
        print "\nAdvert successful!"
    else
        print "\nAdvert not successful."
    endif

endsub

////
//// ReadFromUart()
////
function ReadFromUart()

endFuncVal = 1

len = uartRead(uartRxStr$)

if strcmp(uartRxStr$, termStr$) == 0 then
    print "\nEnding program execution."
    endFuncVal = 0
elseif strcmp(uartRxStr$, "0\r") == 0 then
    print "\nWill not create Immediate Alert Service"
    EnableCreateIASvc = 0
    StartBle()
elseif strcmp(uartRxStr$, "1\r") == 0 then
    print "\nCreating Immediate Alert Service"
    EnableCreateIASvc = 1
    StartBle()
endif

uartRxStr$ = ""     // reset the variable

endfunc endFuncVal

////
//// main()
////

// print "\ngetting bond info..."
//
// dim addr$, extraInfo, i, numDevices
//
// numDevices = SYSINFO(2012)
// print "\nNumber of bonded devices:", numDevices
//
// for i=0 to (numDevices-1)
//     if BleBondMngrGetInfo(i, addr$, extraInfo)==0 then
//         dim hexStr$
//
//         hexStr$ = strhexize$(addr$)
//
//         print "\n\tMAC (straight):", addr$
//         print "\n\tMAC:", hexStr$
//         print "\n\tExtra info:", extraInfo
//     else
//         print "\nUnable to get Bond info"
//     endif
// next

// set up event handlers
onevent EVBLE_ADV_TIMEOUT   call HandleBleAdvTimeout
onevent EVBLEMSG            call HandleBleMsg
onevent EVUARTRX            call HandleUartRx
onevent EVTMR1              call ForceDisconnect
onevent EVTMR2              call TriggerAlert
onevent EVTMR3              call ReadFromUart

waitevent
